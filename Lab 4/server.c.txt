#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <fcntl.h>

struct pdu {
    char type;
    char data[100];
};

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <port>\n", argv[0]);
        exit(1);
    }

    int sockfd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_addr_len = sizeof(client_addr);
    char buffer[1024];

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);

    if (sockfd < 0) {
        perror("Error in socket");
        exit(1);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(atoi(argv[1]));
    server_addr.sin_addr.s_addr = INADDR_ANY;

    if (bind(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Error in bind");
        exit(1);
    }

    while (1) {
        recvfrom(sockfd, buffer, sizeof(buffer), 0, (struct sockaddr *)&client_addr, &client_addr_len);
        struct pdu *pdu = (struct pdu *)buffer;

        if (pdu->type == 'C') {
            // Handle FILENAME PDU (Request to download a file)
            char *filename = pdu->data;
            int file_fd = open(filename, O_RDONLY);
            if (file_fd < 0) {
                // Send an ERROR PDU to the client
                struct pdu epdu;
                epdu.type = 'E';
                strcpy(epdu.data, "File not found.");
                sendto(sockfd, &epdu, strlen(epdu.data) + 2, 0, (struct sockaddr *)&client_addr, sizeof(client_addr));
            } else {
                while (1) {
                    int bytes_read = read(file_fd, pdu->data, sizeof(pdu->data));
                    if (bytes_read <= 0) {
                        // Send FINAL PDU to signal the end of the file transfer
                        struct pdu final_pdu;
                        final_pdu.type = 'F';
                        sendto(sockfd, &final_pdu, 1, 0, (struct sockaddr *)&client_addr, sizeof(client_addr));
                        break;
                    }
                    pdu->type = 'D'; // Set the type to DATA PDU
                    sendto(sockfd, pdu, bytes_read + 2, 0, (struct sockaddr *)&client_addr, sizeof(client_addr));
                }
                close(file_fd);
            }
        } else {
            // Handle other types of PDUs (DATA, FINAL, ERROR)
        }
    }

    close(sockfd);
    return 0;
}
